import random
import time

from mubble import Dispatch, CallbackQuery
from mubble.rules import CallbackData, CallbackDataMarkup
from mubble.tools import ParseMode

from src.database import User, Ores
from src.keyboards import game_mining_menu

dp = Dispatch()


CHANCES = {
        "stone": 0.80,
        "iron": 0.10,
        "gold": 0.05,
        "diamond": 0.02,
        "void": 0.01,
    }
keys = list(CHANCES.keys())
values = list(CHANCES.values())

EMOJIES = {
    "stone": "‚ö´Ô∏è –ö–∞–º—ñ–Ω—å",
    "iron": "‚ö™Ô∏è –ó–∞–ª—ñ–∑–æ",
    "gold": "üü° –ó–æ–ª–æ—Ç–æ",
    "diamond": "üü£ –î—ñ–∞–º–∞–Ω—Ç–∏",
    "void": "üîµ –ë–µ–∑–∫—ñ–Ω–µ—á–Ω—ñ—Å—Ç—å"
}

@dp.callback_query(CallbackData("game_mining"))
async def get_ore_handler(cq: CallbackQuery, user: User):
    ores: Ores = await user.ores.first()

    text = (
        "üíé <b>–í–∏ –∑–∞—Ä–∞–∑ –≤ –º–µ–Ω—é –¥–æ–±—É—Ç–∫—É —Ä—É–¥–∏</b>\n"
        "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä—É–¥:\n"
        "<blockquote>"
        f"‚ö´Ô∏è –ö–∞–º—ñ–Ω—å: {ores.stone}\n"
        f"‚ö™Ô∏è –ó–∞–ª—ñ–∑–æ: {ores.iron}\n"
        f"üü° –ó–æ–ª–æ—Ç–æ: {ores.gold}\n"
        f"üü£ –î—ñ–∞–º–∞–Ω—Ç–∏: {ores.diamond}\n"
        f"üîµ –ë–µ–∑–∫—ñ–Ω–µ—á–Ω—ñ—Å—Ç—å: {ores.void}\n"
        "</blockquote>\n"
    )
    await cq.edit_text(
        text,
        parse_mode=ParseMode.HTML,
        reply_markup=game_mining_menu
    )


@dp.callback_query(CallbackData("start_mining"))
async def start_mining_handler(cq: CallbackQuery, user: User):
    if not user.workers:
        await cq.answer("üíé –í–∏ –Ω–µ –º–∞—î—Ç–µ —Ä–æ–±—ñ—Ç–Ω–∏–∫—ñ–≤!")
        return
    
    if user.mining_timestamp != 0:
        await cq.answer("üíé –í–∏ –≤–∂–µ –ø–æ—á–∞–ª–∏ –¥–æ–±—É—Ç–æ–∫ —Ä—É–¥–∏!")
        return
    user.mining_timestamp = time.time()
    await user.save()
    await cq.answer("üíé –í–∏ –ø–æ—á–∞–ª–∏ –¥–æ–±—É—Ç–æ–∫ —Ä—É–¥–∏!")


@dp.callback_query(CallbackData("end_mining"))
async def end_mining_handler(cq: CallbackQuery, user: User):
    if user.mining_timestamp == 0:
        await cq.answer("üíé –í–∏ –Ω–µ –ø–æ—á–∞–ª–∏ –¥–æ–±—É—Ç–æ–∫ —Ä—É–¥–∏!")
        return

    time_difference = round((time.time() - user.mining_timestamp) / 10)
    if time_difference == 0:
        await cq.answer("üíé –í–∏ —â–µ –Ω–µ –¥–æ–±—É–ª–∏ –∂–æ–¥–Ω–æ—ó —Ä—É–¥–∏!")

    elif time_difference > 60:
        amounts = random.choices(keys, weights=values, k=60)
        await cq.answer("üíé –í–∏ –Ω–µ –º–æ–∂–µ—Ç–µ –¥–æ–±—É–≤–∞—Ç–∏ —Ä—É–¥—É –±—ñ–ª—å—à–µ –Ω—ñ–∂ 1 –≥–æ–¥–∏–Ω—É.")
    else:
        amounts = random.choices(keys, weights=values, k=time_difference)

    ores: Ores = await user.ores.first()

    results = {amount: amounts.count(amount) for amount in set(amounts)}

    ores.stone += results.get("stone", 0)
    ores.iron += results.get("iron", 0)
    ores.gold += results.get("gold", 0)
    ores.diamond += results.get("diamond", 0)
    ores.void += results.get("void", 0)

    user.mining_timestamp = 0
    await ores.save()
    await user.save()

    new_ores = ""
    for key, value in results.items():
        new_ores += f"{EMOJIES.get(key, '')}: {value}\n"

    text = (
        "üíé <b>–í–∏ –∑–∞—Ä–∞–∑ –≤ –º–µ–Ω—é –¥–æ–±—É—Ç–∫—É —Ä—É–¥–∏</b>\n"
        "–°–ø–∏—Å–æ–∫ –≤–∞—à–∏—Ö —Ä—É–¥:\n"
        "<blockquote>"
        f"‚ö´Ô∏è –ö–∞–º—ñ–Ω—å: {ores.stone}\n"
        f"‚ö™Ô∏è –ó–∞–ª—ñ–∑–æ: {ores.iron}\n"
        f"üü° –ó–æ–ª–æ—Ç–æ: {ores.gold}\n"
        f"üü£ –î—ñ–∞–º–∞–Ω—Ç–∏: {ores.diamond}\n"
        f"üîµ –ë–µ–∑–∫—ñ–Ω–µ—á–Ω—ñ—Å—Ç—å: {ores.void}\n"
        "</blockquote>\n"
        "–ó–∞ –º–∏–Ω—É–ª—É —Å–µ—Å—ñ—é –≤–∏ –¥–æ–±—É–ª–∏:\n"
        "<blockquote>"
        f"{new_ores}"
        "</blockquote>"
    )

    await cq.edit_text(text, parse_mode=ParseMode.HTML, reply_markup=game_mining_menu)
    await cq.answer(f"üíé –í–∏ –∑–∞–≤–µ—Ä—à–∏–ª–∏ –¥–æ–±—É—Ç–æ–∫ —Ä—É–¥–∏!")
